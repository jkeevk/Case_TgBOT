
import configparser
import os
from datetime import datetime
import telebot
from telebot import types
from add_text import add_caption

def get_settings():
    """–ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    config = configparser.ConfigParser()
    config.read("settings.ini")
    return (
        config["TELEGRAM"]["token_tg"],
        config["PATH"]["directory_path"],
        config["PUBLIC"]["public"],
    )

def get_latest_photo(directory):
    create_directory_if_not_exists(directory)
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    files = [
        f for f in os.listdir(directory) 
        if os.path.isfile(os.path.join(directory, f)) and f.endswith(('.jpg', '.jpeg', '.png'))
    ]

    if not files:
        return None

    full_paths = [os.path.join(directory, f) for f in files]
    return max(full_paths, key=os.path.getmtime)

def format_file_name(dt, user_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    return f"{dt.year}-{dt.month:02d}-{dt.day:02d}-{dt.hour:02d}-{dt.minute:02d}_{user_id}.jpg"

def create_directory_if_not_exists(directory):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not os.path.exists(directory):
        os.makedirs(directory)

def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
    token_tg, directory_path, public = get_settings()
    bot = telebot.TeleBot(token_tg)
    return bot, directory_path, public

bot, directory_path, public = initialize_bot()

@bot.message_handler(commands=["start"])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞"), types.KeyboardButton("–ù–∞—á–∞—Ç—å"))
    
    bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n‚ú® –Ø - <b>{bot.get_me().first_name}</b>\n\nüì∏ –ñ–¥—É –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!",
        parse_mode="html",
        reply_markup=markup,
    )

@bot.message_handler(content_types=["photo"])
def download_photo(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
    
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        create_directory_if_not_exists(directory_path)
        user_id = message.from_user.id
        dt = datetime.utcfromtimestamp(message.date)
        file_name = format_file_name(dt, user_id)
        file_path = os.path.join(directory_path, file_name)

        with open(file_path, "wb") as new_file:
            new_file.write(downloaded_file)

        latest_file = get_latest_photo(directory_path)
        add_caption(latest_file, 'captions.txt')
        bot.reply_to(message, '–°–æ—Ö—Ä–∞–Ω–∏–ª–∏. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –Ω–∞ –∫–∞–Ω–∞–ª?', reply_markup=markup)
        
    except telebot.exceptions.TelegramAPIError as e:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –≤ Telegram API: {str(e)}')
    except Exception as e:
        bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')

@bot.message_handler(content_types=["text"])
def send_photo(message):
    if message.text.lower() == '–ø—Ä–∞–≤–∏–ª–∞':
        bot.send_message(
        message.chat.id,
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        '- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å .jpg, .jpeg –∏–ª–∏ .png —Ñ–∞–π–ª).\n'
        "- –ë–æ—Ç –¥–æ–±–∞–≤–∏—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏—è—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å—å\n"
        "- –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        "- –ù–∞–∂–º–∏—Ç–µ '–î–∞' –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        "- –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ —á–∞—Ç.\n\n",
    )
    latest_photo = get_latest_photo(directory_path)
    
    if message.text.lower() == "–¥–∞":
        if latest_photo:

            with open(latest_photo, 'rb') as photo:

                sent_message = bot.send_photo(message.chat.id, photo=photo)
                bot.forward_message(public, message.chat.id, sent_message.message_id)
                bot.send_message(message.chat.id, "–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
        
                start_message(message)
        else:
            bot.reply_to(message, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')        
    else:
        bot.send_message(message.chat.id, "–ñ–¥—ë–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
        start_message(message)
  

if __name__ == "__main__":
    print("Bot is running")
    bot.polling(none_stop=True)
